#cloud-config

---
write_files:
  - path: /opt/bin/load-k8s.sh
    owner: root
    content: |
      #!/usr/bin/bash
      set -e
      /usr/bin/mkdir -p /opt/bin
      /usr/bin/wget -N -P /opt/bin http://{{.MasterIpAddr}}/k8s/kubelet
      /usr/bin/chmod +x /opt/bin/kubelet
      /usr/bin/wget -N -P /opt/bin http://{{.MasterIpAddr}}/k8s/kube-proxy
      /usr/bin/chmod +x /opt/bin/kube-proxy
      /usr/bin/wget -N -P /opt/bin http://{{.MasterIpAddr}}/k8s/setup-network-environment
      /usr/bin/chmod +x /opt/bin/setup-network-environment
  - path: /etc/ntp.conf
    content: |
      server {{.MasterIpAddr}}

      # - Allow only time queries, at a limited rate.
      # - Allow all local queries (IPv4, IPv6)
      restrict default nomodify nopeer noquery limited kod
      restrict 127.0.0.1
      restrict [::1]
coreos:
  etcd2:
    proxy: on
    data-dir: /var/lib/etcd2/
    listen-client-urls: http://127.0.0.1:2379,http://127.0.0.1:4001
    advertise-client-urls: http://127.0.0.1:2379,http://127.0.0.1:4001
    initial-cluster: etcd01=http://{{.MasterIpAddr}}:2380
  fleet:
    etcd-servers: http://{{.MasterIpAddr}}:2379
    metadata: "role=peon,kube-role=node"
    public-ip: {{.HostIpAddr}}
  flannel:
    etcd-endpoints: http://{{.MasterIpAddr}}:2379
    interface: {{.HostIpAddr}}
  units:
  - name: systemd-timesyncd.service
    command: stop
    mask: true
  - name: ntpd.service
    command: start
    enable: true
  - name: update-engine-stub.service
    command: stop
    mask: true
  - name: etcd2.service
    enable: true
    command: start
  # Disabling etcd may not be necessary but in case it is...
  #- name: etcd.service
  #  enable: false
  - name: fleet.service
    command: start
  - name: load-k8s.service
    command: start
    content: |
      [Unit]
      Description=Download kubelet and kube-proxy
      Wants=network-online.target
      After=network-online.target
      [Service]
      ExecStartPre=/usr/bin/chmod +x /opt/bin/load-k8s.sh
      ExecStart=/usr/bin/bash /opt/bin/load-k8s.sh
      RemainAfterExit=true
      Type=oneshot
  - name: docker.socket
    command: start
    drop-ins:
      - name: 50-early-docker.conf
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
  - name: docker-tcp.socket
    command: start
    enable: true
    content: |
      [Unit]
      Description=Docker Socket for the API
      [Socket]
      ListenStream=0.0.0.0:4243
      BindIPv6Only=both
      Service=docker.service
      [Install]
      WantedBy=sockets.target          
  - name: docker.service
    command: start
    drop-ins:
      - name: 50-docker-registry.conf
        content: |
          [Unit]
          #After=early-docker.service flanneld.service
          #Requires=early-docker.service
          [Service]
          Type=notify
          Restart=always
          RestartSec=5
          # Old docker leaving pid around
          ExecStartPre=-/usr/bin/rm /var/run/docker.pid
          Environment='DOCKER_OPTS= --insecure-registry={{.MasterIpAddr}}:5000 --insecure-registry={{.MasterIpAddr}}:5050'
  - name: early-docker.service
    command: start
    content: |
      [Unit]
      Description=Early Docker Application Container Engine
      Documentation=http://docs.docker.com
      After=early-docker.socket
      Requires=early-docker.socket

      [Service]
      Environment=TMPDIR=/var/tmp
      MountFlags=slave
      LimitNOFILE=1048576
      LimitNPROC=1048576
      ExecStart=/usr/lib/coreos/dockerd --daemon --insecure-registry={{.MasterIpAddr}}:5050 --host=fd:// --bridge=none --iptables=false --ip-masq=false --graph=/var/li

      [Install]
      WantedBy=early-docker.target
  - name: setup-network-environment.service
    command: start
    content: |
      [Unit]
      Description=Setup Network Environment
      Documentation=https://github.com/kelseyhightower/setup-network-environment
      Requires=network-online.target
      After=network-online.target
      Before=flanneld.service
      [Service]
      ExecStart=/opt/bin/setup-network-environment
      RemainAfterExit=yes
      Type=oneshot
  - name: flanneld.service
    command: start
    content: |    
      Unit]
      Description=Network fabric for containers
      Documentation=https://github.com/coreos/flannel
      Requires=early-docker.service
      After=etcd.service etcd2.service early-docker.service
      Before=early-docker.target

      [Service]
      Type=notify
      Restart=always
      RestartSec=5
      Environment="TMPDIR=/var/tmp/"
      Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
      Environment="FLANNEL_VER=0.5.0"
      Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
      LimitNOFILE=40000
      LimitNPROC=1048576
      ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
      ExecStartPre=/sbin/modprobe ip_tables
      ExecStartPre=/usr/bin/mkdir -p /run/flannel
      ExecStartPre=/usr/bin/mkdir -p ${ETCD_SSL_DIR}
      ExecStartPre=-/usr/sbin/brctl addbr docker0
      ExecStartPre=/usr/bin/touch /run/flannel/options.env

      ExecStart=/usr/libexec/sdnotify-proxy /run/flannel/sd.sock \
        /usr/bin/docker -H="unix:///var/run/early-docker.sock" run --net=host --privileged=true --rm \
        --volume=/run/flannel:/run/flannel \
        --env=NOTIFY_SOCKET=/run/flannel/sd.sock \
        --env=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        --env=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
        --env-file=/run/flannel/options.env \
        --volume=/usr/share/ca-certificates:/etc/ssl/certs:ro \
        --volume=${ETCD_SSL_DIR}:/etc/ssl/etcd:ro \
        {{.MasterIpAddr}}:5050/insta/flannel:${FLANNEL_VER} /opt/bin/flanneld --ip-masq=true

      # Update docker options
      ExecStartPost=/usr/bin/docker run --net=host --privileged=true --rm -v /run:/run \
        {{.MasterIpAddr}}:5050/insta/flannel:${FLANNEL_VER} \
        /opt/bin/mk-docker-opts.sh -d /run/flannel_docker_opts.env -i
      # Remove the old docker bridge because it remains for some reason
      ExecStartPost=/usr/bin/ip link set dev docker0 down
      ExecStartPost=/usr/sbin/brctl delbr docker0
  - name: kubelet.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=docker.service 
      After=docker.service

      [Service]
      EnvironmentFile=/etc/network-environment
      ExecStart=/opt/bin/kubelet \
      --address=0.0.0.0 \
      --enable_server=true \
      --port=10250 \
      --read_only_port=10255 \
      --hostname_override={{.HostIpAddr}} \
      --api_servers={{.MasterIpAddr}}:8080 \
      --cluster_dns=10.100.0.10 \
      --cluster_domain=kubernetes.local \
      --healthz_bind_address=0.0.0.0 \
      --healthz_port=10254 \
      --cadvisor_port=4194 \
      --log_cadvisor_usage=true \
      --logtostderr=true \
      --pod-infra-container-image={{.MasterIpAddr}}:5050/insta/pause:0.8.0 \
      --enable-server=true \
      --max-pods=1000 \
      --allow-privileged=true \
      --v=0
      Restart=always
      RestartSec=10
  - name: kube-proxy.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kubelet.service
      After=kubelet.service
      [Service]
      LimitNOFILE=infinity
      ExecStart=/opt/bin/kube-proxy \
      --master={{.MasterIpAddr}}:8080 \
      --logtostderr=true \
      --v=0
      Restart=always
      RestartSec=10   
  update:
    group: beta
    reboot-strategy: off
ssh-authorized-keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCewbHjwnuZOVDwEkTI98d7KC3NJKfLHVpnvawOVuNnfy1XxEqakWbsBN9Q6tbod+x76P0jUPc1uixY2aieNmuWd9+bq5+m+5xl/gS5AyBr/DuBMiDNkWPgazeg+l6r77s4+Pl2EVT4wnGd7loP2WNAlZJacXopMDivHfmfL3nBt6DvnWDPN1yJlMAmJkoNIc+fcLCZzKUw9+13w1Y6hK5gd8/5vASB4AZUXYBlvFNCoYYaSIPkHtTGy+fyigkCIlRWIbzpCn4iUT9cj7nb8i1+zyfa0ACx1IP9tFAWxx94UagwrX/Pw/YqoJQfPiTl1ULMusTJHif+csZQZLLgCp3Em3cqRi3oGCTUAP/HtUfqp0pAORWtB4iFTwFw92FT1Qx8ZG9BG/Kk7b8+3+M889I4C34N18nsnpkaJOD6Akm8qGofT+zsjuZaJnJABajGGhJCC2koUP71vdXCms9WcR0Xh56MuLjdCdEzz6vo7oTVvhe2sBNXYf0hXkwCV/1ST+dDJjR1ZCl9+dXyrJPmgyCsBfhY52o8Wufh8A15fdUm607E73+LNhCLL4va57DacDyrgGU/s9rvbvNcKr7RTZY2Lp9/ywiPfYUWlXgDkPiGXf3YPdMpb5OPkyyIFAF4j96dwG2i2fG3Rr7ohEHKomLzlAadxYosbhhVeXlmc4B+kQ== nuc@kubernetes.local
